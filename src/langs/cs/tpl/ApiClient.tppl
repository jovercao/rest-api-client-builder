/*
* 本文档由swagger客户端生成工具自动生成
* 作者： Jover
*/
using System.Threading.Tasks;

namespace [:= $config.namespace :]
{
    /// <summary>
    /// RestSharp 文档地址 https://github.com/restsharp/RestSharp
    /// swagger 地址：[:=$config.swaggerUrl:]
    /// </summary> 
    public partial class [:=$name:]Client
    {
        private RestSharp.RestClient client;
        public [:=$name:]Client(string url = "[:=$config.baseUrl:]")
        {
            client = new RestSharp.RestClient(url);
        }

[:

for (const [ fn, [ method, path, define ]] of Object.entries(current)) {
    const returnInfo = define.responses['200'];
    const returnType = $helpers.resolveType(returnInfo);
    const hasReturn = (returnType !== 'void');
    const parameters = define.parameters || [];
    const pathParams = parameters.filter(p => p.in === 'path');
    const hasQuery = parameters.filter(p => p.in === 'query').length > 0;
    const hasBody = ['post', 'put'].includes(method);
    const hasBodyType = parameters.filter(p => p.in === 'body').length > 0;

    const params = pathParams.map(p => `${$helpers.resolveType(p)} ${p.name}`);
    if (hasQuery) {
        const queryParamType = $helpers.resolveQueryType($name, fn);
        params.push(`${queryParamType} _query`);
    }
    if (hasBody) {
        const bodyParamType = hasBodyType ? $helpers.resolveBodyType($name, fn) : 'object';
        params.push(`${bodyParamType} _body`);
    }

:]
        /// <summary>
        /// [:=define.summary:]
        /// </summary>
[:=pathParams.map(p => `        /// <param name="${p.name}">${p.description}</param>`).join('\n'):]
[:if (hasReturn) {:]        /// <returns>[:=returnInfo.description:]</returns>[:}:]
        public async [:= hasReturn ? `Task<${returnType}>` : 'void' :] [:=fn:]([:=params.join(', '):])
        {
            var path = $"[:=path:]"[:=hasQuery ? ' + "?" + QueryString.QS.Stringify(_query)' : '':];
            var request = new RestSharp.RestRequest(path, RestSharp.Method.[:=method.toUpperCase():]);
[:if (hasBody) {:]
            request.AddJsonBody(_body);
[:}:]
            [:=hasReturn ? 'var response = ' : '':]await client.ExecuteTaskAsync(request);
[:if (hasReturn) {:]
            return Newtonsoft.Json.JsonConvert.DeserializeObject<[:=returnType:]>(response.Content);
[:}:]
        }
[:
}
:]
    }
}
