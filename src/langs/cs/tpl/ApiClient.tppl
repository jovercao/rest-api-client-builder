/*
* 本文档由swagger客户端生成工具自动生成
* 作者： Jover
*/
using Newtonsoft.Json;
using RestSharp;

namespace [:= this.$config.namespace :]
{
    /// <summary>
    /// RestSharp 文档地址 https://github.com/restsharp/RestSharp
    /// swagger 地址：[:=this.$config.swaggerUrl:]
    /// </summary> 
    public partial class [:=this.$name:]Client
    {
        private RestClient client;
        public ApiClient(string url = "[:=this.$config.baseUrl:]")
        {
            client = new RestClient(url);
        }

[:
for(const [fn, [ method, path, methodInfo ]] of Object.entries(current)) {
    const methods = Object.keys(pathDefine);
    let returnType = $helpers.resolveType(method.responses['200']);
    const parameters = define.parameters || [];
    /* 参数名重复处理 */
    const pathParams = parameters.filter(p => p.in === 'path');
    const hasQuery = parameters.filter(p => p.in === 'query').length > 0;
    const hasBody = ['post', 'put'].includes(method);
    /* 查询字符串对象名称 */
    const queryParamType = $helpers.resolveQueryType($name, fn);
    const bodyParamType =  $helpers.resolveBodyType($name, fn);
:]
        /// <summary>
        /// [:=methodInfo.summary:]
        /// </summary>
[:=(pathParams).map(p => `        /// <param name="${p.name}">${p.description}</param>`).join('\r\n'):]
        public [:=returnType:] [:=fn:]([:= pathParams.map(parameter => $helpers.resolveType(parameter) + ' ' + parameter.name).join(',') :][:=hasQuery ? `, ${queryParamType} _query` : '':][:=hasBody ? `, ${bodyParamType} _body` : '' :])
        {
            var path = $"[:=path:]";
            var request = new RestRequest(path, RestSharp.Method.[:=method.toUpperCase():]);
[:if (hasBody) {:]
            request.AddJsonObject(_body);
[:}:]
            var response = client.ExecuteTaskAsync(request);
            return Newtonsoft.Json.JsonConvert.DeserializeObject<[:=returnType:]>(response.Content);
        }
[:
}
:]
    }
}