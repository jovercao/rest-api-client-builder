/*
* 本文档由swagger客户端生成工具自动生成
* 使用wx-promise-pro库，https://github.com/young-js/wx-promise-pro
* url参数序列化，使用了qs库，https://github.com/ljharb/qs
* 作者： Jover
*/
import 'wx-promise-pro';
import qs from 'qs';

/**
* config 请参考小程序与axios
* 相较于小程序，多出一个params属性，即querystring的对象，可以自动序列化
*/
const http = async function(config) {
    let { url } = config;

    if (config.params) {
        url += '?' + qs.stringify(config.params, { allowDots: true });
    }
    const options = Object.assign(config, http.defaults);

    if (http.defaults.baseURL && !url.match(/^https?\:\/\//)) {
        let { baseURL } = http.defaults;
        if (baseURL.endsWith('/')) {
            baseURL = baseURL.substring(0, baseURL.length - 1);
        }
        if (url.startsWith('/')) {
            url = url.substring(1);
        }
        options.url = `${baseURL}/${url}`;
    } else {
        options.url = url;
    }

    return await wx.pro.request(options);
}

http.defaults = {
    baseURL: '[:=$config.baseUrl || '':]',
    dataType: 'json'
};

[:
let entries = Object.entries(current);
/*.map(([key, value]) => [ key[0].toLowerCase() + key.substring(1), value ]);*/
for (const [groupName, groupInfo] of entries) {
:]
export const [:=groupName:] = {
[:
    for (const [functionName, functionInfo] of Object.entries(groupInfo)) {

        const [method, path, define] = functionInfo;
        const returnInfo = define.responses[200];
        const returnType = $helpers.resolveType(returnInfo);
        const hasReturn = returnType !== 'void';
        const tplPath = path.replace(new RegExp('\\{', 'g'), '${');
        const parameters = define.parameters || [];
        const fn = functionName[0].toLowerCase() + functionName.substring(1);
        const pathParams = parameters.filter(p => p.in === 'path');
        const queryParams = parameters.filter(p => p.in === 'query');
        const bodyParams = parameters.filter(p => p.in === 'body');
        const args = [ ...pathParams.map(p => p.name) ];
        if (queryParams.length) {
            args.push('$query');
        }
        const hasBody = ['post', 'put'].includes(method);
        if (hasBody) {
            args.push('$body');
        }
:]
    /** 
    * [:=define.summary || '':][: if (pathParams.length) {:]
    * [:=pathParams.map(p => `@param {${$helpers.resolveType(p)}} ${p.name} ${p.format || '-'}，${p.required ? '必填' : ''}，${p.description || ''}`).join('\n    * ') :][:}:]
[:if(queryParams.length) {:]        * @param {*} $query 查询字符串参数
    *    [:= queryParams.map(p=> `${p.name}: ${$helpers.resolveType(p)} ${p.required ? '必填' : ''}，${p.description || ''}`).join('\n    *    '):]
[:}:][:if(hasBody) {:]    * @param {*} $body http内容参数
    *    [:= bodyParams.map(p=> `${p.name}: ${$helpers.resolveType(p)} ${p.required ? '必填' : ''}，${p.description || ''}`).join('\n    *    '):]
[:}:]    * @returns {[:= returnType :]} [:= returnInfo.description :]
    */
    async [:=fn:]([:=args.join(', '):]) {
        const path = `[:=tplPath:]`;
        const $options = Object.assign({
            method: '[:=method:]',
            url: path[:if (queryParams.length) {:],
            params: $query[:} if (hasBody) {:],
            data: $body[:}:]
        }, arguments[[:=args.length:]]);

        [:if (hasReturn) {:]const res = [:}:]await http($options);[:if (hasReturn) {:]
        return res.data;[:}:]
    },
[:
    }
:]
};

[:
}
:]

/**
* swagger 地址：[:=$config.swaggerUrl:]
* 本实例由axios创建 axios文档地址 https://github.com/axios/axios
*/
const apis = {
    $http: http,[:
let i = 0;
for (const [groupName, groupInfo] of entries) {
    i++;
:]
    [:=groupName:][:=i < entries.length ? ',' : '':][:
}
:]
};

export const $http = http;
export default apis;
